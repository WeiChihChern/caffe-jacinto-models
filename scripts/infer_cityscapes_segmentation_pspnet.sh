#-------------------------------------------------------
LOG="training/infer-log-`date +'%Y-%m-%d_%H-%M-%S'`.txt"
exec &> >(tee -a "$LOG")
echo Logging output to "$LOG"
#-------------------------------------------------------

#------------------------------------------------------
#palette used to translate id's to colors - for 5 classes
palette5="[[0,0,0],[128,64,128],[220,20,60],[250,170,30],[0,0,142],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]]"

#for 19 or 20 classes training of cityscapes, first convert to original labelIds and then apply the pallete
#label_dict_20_to_34="{0:7, 1:8, 2:11, 3:12, 4:13, 5:17, 6:19, 7:20, 8:21, 9:22, 10:23, 11:24, 12:25, 13:26, 14:27, 15:28, 16:31, 17:32, 18:33, 19:0}"

#34 class pallette - for visualization
#palette34="[(  0,  0,  0),(  0,  0,  0),(  0,  0,  0),(  0,  0,  0),(  0,  0,  0),(111, 74,  0),( 81,  0, 81),(128, 64,128),(244, 35,232),(250,170,160),(230,150,140),( 70, 70, 70),(102,102,156),(190,153,153),(180,165,180),(150,100,100),(150,120, 90),(153,153,153),(153,153,153),(250,170, 30),(220,220,  0),(107,142, 35),(152,251,152),( 70,130,180),(220, 20, 60),(255,  0,  0),(  0,  0,142),(  0,  0, 70),(  0, 60,100),(  0,  0, 90),(  0,  0,110),(  0, 80,100),(  0,  0,230),(119, 11, 32),(  0,  0,142)]"

#palette34="[(  0,  100,  0),(  100,  0,  0),(  0,  0,  100),(  100,  100,  0),(  0,  100,  100),(111, 74,  0),( 81,  0, 81),(128, 64,128),(244, 35,232),(250,170,160),(230,150,140),( 70, 70, 70),(102,102,156),(190,153,153),(180,165,180),(150,100,100),(150,120, 90),(153,153,153),(153,153,153),(250,170, 30),(220,220,  0),(107,142, 35),(152,251,152),( 70,130,180),(220, 20, 60),(255,  0,  0),(  0,  0,142),(  0,  0, 70),(  0, 60,100),(  0,  0, 90),(  0,  0,110),(  0, 80,100),(  0,  0,230),(119, 11, 32),(  0,  0,142)]"

palette34="[
(128,64,128),
(244,35,232),
(70,70,70),
(102,102,156),
(190,153,153),
(153,153,153),
(250,170,30),
(220,220,0),
(107,142,35),
(152,251,152),
(70,130,180),
(220,20,60),
(255,0,0),
(0,0,142),
(0,0,70),
(0,60,100),
(0,80,100),
(0,0,230),
(119,11,32),
(128,192,0),
(0,64,128),
(128,64,128),
(0,192,128),
(128,192,128),
(64,64,0),
(192,64,0),
(64,192,0),
(192,192,0),
(64,64,128),
(192,64,128),
(64,192,128),
(192,192,128),
(0,0,64),
(128,0,64),
(0,128,64),
(128,128,64),
(0,0,192),
(128,0,192),
(0,128,192),
(128,128,192),
(64,0,64),
(192,0,64),
(64,128,64),
(192,128,64),
(64,0,192),
(192,0,192),
(64,128,192),
(192,128,192),
(0,64,64),
(128,64,64),
(0,192,64),
(128,192,64),
(0,64,192),
(128,64,192),
(0,192,192),
(128,192,192),
(64,64,64),
(192,64,64),
(64,192,64),
(192,192,64),
(64,64,192),
(192,64,192),
(64,192,192),
(192,192,192),
(32,0,0),
(160,0,0),
(32,128,0),
(160,128,0),
(32,0,128),
(160,0,128),
(32,128,128),
(160,128,128),
(96,0,0),
(224,0,0),
(96,128,0),
(224,128,0),
(96,0,128),
(224,0,128),
(96,128,128),
(224,128,128),
(32,64,0),
(160,64,0),
(32,192,0),
(160,192,0),
(32,64,128),
(160,64,128),
(32,192,128),
(160,192,128),
(96,64,0),
(224,64,0),
(96,192,0),
(224,192,0),
(96,64,128),
(224,64,128),
(96,192,128),
(224,192,128),
(32,0,64),
(160,0,64),
(32,128,64),
(160,128,64),
(32,0,192),
(160,0,192),
(32,128,192),
(160,128,192),
(96,0,64),
(224,0,64),
(96,128,64),
(224,128,64),
(96,0,192),
(224,0,192),
(96,128,192),
(224,128,192),
(32,64,64),
(160,64,64),
(32,192,64),
(160,192,64),
(32,64,192),
(160,64,192),
(32,192,192),
(160,192,192),
(96,64,64),
(224,64,64),
(96,192,64),
(224,192,64),
(96,64,192),
(224,64,192),
(96,192,192),
(224,192,192),
(0,32,0),
(128,32,0),
(0,160,0),
(128,160,0),
(0,32,128),
(128,32,128),
(0,160,128),
(128,160,128),
(64,32,0),
(192,32,0),
(64,160,0),
(192,160,0),
(64,32,128),
(192,32,128),
(64,160,128),
(192,160,128),
(0,96,0),
(128,96,0),
(0,224,0),
(128,224,0),
(0,96,128),
(128,96,128),
(0,224,128),
(128,224,128),
(64,96,0),
(192,96,0),
(64,224,0),
(192,224,0),
(64,96,128),
(192,96,128),
(64,224,128),
(192,224,128),
(0,32,64),
(128,32,64),
(0,160,64),
(128,160,64),
(0,32,192),
(128,32,192),
(0,160,192),
(128,160,192),
(64,32,64),
(192,32,64),
(64,160,64),
(192,160,64),
(64,32,192),
(192,32,192),
(64,160,192),
(192,160,192),
(0,96,64),
(128,96,64),
(0,224,64),
(128,224,64),
(0,96,192),
(128,96,192),
(0,224,192),
(128,224,192),
(64,96,64),
(192,96,64),
(64,224,64),
(192,224,64),
(64,96,192),
(192,96,192),
(64,224,192),
(192,224,192),
(32,32,0),
(160,32,0),
(32,160,0),
(160,160,0),
(32,32,128),
(160,32,128),
(32,160,128),
(160,160,128),
(96,32,0),
(224,32,0),
(96,160,0),
(224,160,0),
(96,32,128),
(224,32,128),
(96,160,128),
(224,160,128),
(32,96,0),
(160,96,0),
(32,224,0),
(160,224,0),
(32,96,128),
(160,96,128),
(32,224,128),
(160,224,128),
(96,96,0),
(224,96,0),
(96,224,0),
(224,224,0),
(96,96,128),
(224,96,128),
(96,224,128),
(224,224,128),
(32,32,64),
(160,32,64),
(32,160,64),
(160,160,64),
(32,32,192),
(160,32,192),
(32,160,192),
(160,160,192),
(96,32,64),
(224,32,64),
(96,160,64),
(224,160,64),
(96,32,192),
(224,32,192),
(96,160,192),
(224,160,192),
(32,96,64),
(160,96,64),
(32,224,64),
(160,224,64),
(32,96,192),
(160,96,192),
(32,224,192),
(160,224,192),
(96,96,64),
(224,96,64),
(96,224,64),
(224,224,64),
(96,96,192),
(224,96,192),
(96,224,192),
(0,0,0)]"

#echo $palette34

#print("palette34:", palette34)

num_images=1000 #10 #1000
crop="1024 512"
resize="369 369" 
#resize="1024 512" 


#------------------------------------------------------
model="/user/a0875091/files/work/github/PSPNet/evaluation/prototxt/pspnet101_cityscapes_369_deploy.prototxt"
#model="../trained/image_segmentation/cityscapes5_jsegnet21v2/initial/deploy.prototxt"
weights="/data/mmcodec_video2_tier3/users/soyeb/semantic/PSPNet/pspnet101_cityscapes.caffemodel"

#Infer
#input="input/sample"
#output="output/sample"

#input="./data/drive0009_list.txt"
#input="./data/cityscapes/frankfurt_list.txt"
input="./data/cityscapes/demoVideo_stuttguart_00.txt"
output="/data/mmcodec_video2_tier3/users/soyeb/semantic/test/deploy_1280x384_pspnet_stuttguart_00_crop"

#Generate output images for chroma blended visualization
./tools/utils/infer_segmentation.py --crop $crop --resize $resize --model $model --weights $weights --input $input --output $output --num_images $num_images --resize_back --blend --palette="$palette34"
#--palette="$palette34" --label_dict="$label_dict_20_to_34"


#Generate output images for running the IOU measurement (using the measure_...  script)
#./tools/utils/infer_segmentation.py --crop $crop --resize $resize --model $model --weights $weights --input $input --output $output --num_images $num_images --resize_back --label_dict="$label_dict_20_to_34"


